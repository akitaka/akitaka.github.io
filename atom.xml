<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Akitaka's Blog]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://akitaka.github.io/"/>
  <updated>2014-07-23T08:02:47.665Z</updated>
  <id>http://akitaka.github.io/</id>
  
  <author>
    <name><![CDATA[Akitaka Hu]]></name>
    <email><![CDATA[hzl410@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[使用Linode搭建pptp服务器]]></title>
    <link href="http://akitaka.github.io/2014/07/01/pptp_server_on_linode/"/>
    <id>http://akitaka.github.io/2014/07/01/pptp_server_on_linode/</id>
    <published>2014-07-01T11:06:51.000Z</published>
    <updated>2014-07-14T14:12:22.000Z</updated>
    <content type="html"><![CDATA[<p>pptp，你们懂的啊。最近各种。。。大家懂的。。。所以。。。<br>网上找了各种对比，觉得还是Linode比较靠谱，加上最近有了最低配置的10刀/月的已然够用。<br>因为Linode目前只支持国际信用卡支付，所以办理一张国际信用卡(例如: Visa, MasterCard, American Express, Discover)。</p>
<p>废话不多说了。。。先来注册个账号吧^_^。<br>大家可以用 <a href="https://www.linode.com/?r=e8c2ee3b7976cb836aecc9d0c43f95ed8178e14f" target="_blank">我的邀请链接</a> 注册，这样你使用了90天后，我可以返回20刀。TXH～～( ^ω^)/</p>
<p><del>注册时填上优惠码: BOOTSTRAPPEDFM 即送50刀。</del><br><del>仅限新用户注册。</del><br>已过期。。。TAT<br><a id="more"></a><br>原文:<br>Referrals reward you when you refer people to Linode. If someone signs up using your referral code, you’ll receive a credit of $20.00, so long as the person you referred remains an active customer for 90 days.</p>
<p>当然你可以选择直接在<a href="https://www.linode.com" target="_blank">linode官网</a>注册。</p>
<p>登录是使用用户名，而非email地址。。。(我会跟你们说:我给坑了好久使劲输email不知道为嘛登不上去嘛。。。坑爹的习惯各种email登录。。。T^T</p>
<p>注册完成后，可以在首页看到个黄色的警告，让我们完善个人信息。<br>填写名字、地址(都用拼音即可)、信用卡账号，在最底下有个预付费的选项，默认是20刀，先选了5刀，先试用一下～点击确认，直接银行通知我扣钱了。。。我。。。＝。＝｜｜<br>选择需要的主机，他是按照每小时扣钱的，而且可以随时修改。先选个最低配置的吧～<br>linode 1024～～～1024。。。1024。。。1024。。。我。。。似乎。。。<br><img src="/images/linode/addnode.jpg"><br>添加了linode之后。。。他就开始计费了，点Dashboard<br><img src="/images/linode/linodes.jpg"></p>
<p>选择Rebuild，默认Debian7.5系统，在Root Password里设置个主机密码。这个密码就是以后用SSH远程登录的密码。<br><img src="/images/linode/rebuild.png"></p>
<p>稍后，主机就新建完系统了，点Dashboard页面，这时候主机还没有开起来<br>在左边select下面有个Boot按钮，点击Boot启动主机，稍等片刻，主机就跑起来了。</p>
<hr>
<p>下面我们开始配置服务器，我用的是Mac，所以打开系统自带的终端即可，windows的可以下载一个putty使用。<br>tips: 系统自带vi，编辑文件前按<code>i</code>，保存、退出：按esc键，然后依次输入<code>:wq</code>。</p>
<hr>
<p>SSH登录</p>
<h4 id="在终端里输入">在终端里输入</h4>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="tag">ssh</span> <span class="tag">root</span><span class="at_rule">@<span class="keyword">服务器IP地址</span></span>
</pre></td></tr></table></figure>

<p>输入密码，首次连接输入yes。显示登录信息，光标跳动，已经登录成功。<br>在putty上<br>运行exe，填入IP地址，选择SSH。<br>然后点击Open，输入用户名和密码，即可。<br>tips: 密码输入过程中，不显示任何东西，大家不要以为没有输入。</p>
<hr>
<p>先更新一下系统:<br>因为已经是root用户登录了，所以不用加sudo，直接输入。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>apt-<span class="keyword">get</span> update
apt-<span class="keyword">get</span> upgrade
</pre></td></tr></table></figure>

<hr>
<p>安装ppp、iptables、pptpd</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>apt-<span class="keyword">get</span> install ppp iptables pptpd
</pre></td></tr></table></figure>

<p>安装过程中，按照提示输入y继续。。。</p>
<hr>
<p>修改pptp配置</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="title">vi</span> /etc/pptpd.conf
localip <span class="number">192.168.0.1</span>
remoteip <span class="number">192.168.0.234</span>-<span class="number">238</span>,<span class="number">192.168.0.245</span>
</pre></td></tr></table></figure>

<p>修改pptpd-opeions</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="title">vi</span> /etc/ppp/pptpd-options
<span class="comment">#在最后添加:</span>
ms-dns <span class="number">8.8.8.8</span>
ms-dns <span class="number">8.8.4.4</span>
</pre></td></tr></table></figure>

<p>用#注释掉require-mppe-128。(取消加密，在客户端配置时候需要选择加密方式:无</p>
<hr>
<p>设置ppp账号、密码</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>vi /etc/ppp/chap<span class="attribute">-secrets</span>
user pptpd <span class="number">123456</span> <span class="subst">*</span>
</pre></td></tr></table></figure>

<p>每一行都是:<code>账号 pptpd 密码 IP</code>格式，最后一个设置*表示自动分配IP，每个账号一行。</p>
<hr>
<p>修改内核设置:</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>vi /etc/sysctl<span class="preprocessor">.conf</span>

net<span class="preprocessor">.ipv</span>4<span class="preprocessor">.ip</span>_forward = <span class="number">1</span>

<span class="preprocessor">#注释掉net.ipv4.tcp_syncookies</span>
<span class="preprocessor">#net.ipv4.tcp_syncookies = 1</span>
</pre></td></tr></table></figure>

<p>重启服务<code>sysctl -p</code></p>
<hr>
<p>配置iptables转发规则</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>iptables <span class="attribute">-t</span> nat <span class="attribute">-A</span> POSTROUTING <span class="attribute">-s</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">24</span> <span class="attribute">-o</span> eth0 <span class="attribute">-j</span> MASQUERADE
<span class="comment">//有时候因为 TCP MSS 大小造成部分网站无法访问问题</span>
iptables <span class="attribute">-I</span> FORWARD <span class="attribute">-p</span> tcp <span class="subst">--</span>syn <span class="attribute">-i</span> ppp<span class="subst">+</span> <span class="attribute">-j</span> TCPMSS <span class="subst">--</span><span class="built_in">set</span><span class="attribute">-mss</span> <span class="number">1356</span>
iptables<span class="attribute">-save</span>
</pre></td></tr></table></figure>

<hr>
<p>重启pptp服务</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>/etc/init<span class="preprocessor">.d</span>/pptpd restart
</pre></td></tr></table></figure>

<hr>
<p>OK以上就是服务器端的配置啦。<br>下面开始配置客户端。</p>
<hr>
<p>Mac:<br>打开系统偏好设置-&gt;网络<br>点击左下角的加号<br>接口，选择VPN<br><img src="/images/linode/vpn_mac.png"></p>
<p>VPN类型，选择pptp<br><img src="/images/linode/vpn_type.png"></p>
<p>服务器地址填入主机的IP地址<br>账号填入在chap-secrets中写入的账号<br><img src="/images/linode/vpn_mac_set.png"></p>
<p>加密选择: 无</p>
<p>点击鉴定设置，输入密码。</p>
<p>点击高级：勾选通过VPN发送所有流量。<br><img src="/images/linode/vpn_mac_gaoji.png"></p>
<p>点击连接，稍后就可以看到上面的连接状态了。<br>连接后可以。。。该干嘛干嘛了＝。＝～</p>
<hr>
<p>iPad:<br>设置-&gt;通用，拉到最下面，有个VPN<br>点击进去，选择添加VPN配置<br><img src="/images/linode/iPad_setting.png"></p>
<p>在tab上，点击pptp；<br>描述随便填一个喜欢的名字；<br>服务器填入主机IP地址；<br>账户、密码填入服务器上设置的用户名和密码 (服务器上ip地址设置的*，可以同一个账户同时在多个设备上登录，如果固定IP，多设备登录可能会造成IP冲突，导致无法上网<br>加密级别，选择无<br>然后点击右上角的存储，保存当前设置。<br>点击配置勾选，然后打开第一行右边的开关，第二行会显示已连接。<br>好了，打开Safari测试一下吧～<br>iPhone上配置过程也相似。</p>
<hr>
<p>Android:<br>点击系统设置，在无线和网络找到VPN，点击添加VPN配置文件<br>输入名称，类型选择PPTP<br>填入服务器IP地址<br>取消勾选ppp加密(MPPE)；<br>点击保存；<br>然后单击刚才添加的名称，输入用户名和密码，点击连接。<br>稍后就可以看到已成功连接。</p>
<p>嗯。。。以上。。。祝大家成功。。。（≧∇≦）</p>
]]></content>
    <summary type="html"><![CDATA[<p>pptp，你们懂的啊。最近各种。。。大家懂的。。。所以。。。<br>网上找了各种对比，觉得还是Linode比较靠谱，加上最近有了最低配置的10刀/月的已然够用。<br>因为Linode目前只支持国际信用卡支付，所以办理一张国际信用卡(例如: Visa, MasterCard, American Express, Discover)。</p>
<p>废话不多说了。。。先来注册个账号吧^_^。<br>大家可以用 <a href="https://www.linode.com/?r=e8c2ee3b7976cb836aecc9d0c43f95ed8178e14f" target="_blank">我的邀请链接</a> 注册，这样你使用了90天后，我可以返回20刀。TXH～～( ^ω^)/</p>
<p><del>注册时填上优惠码: BOOTSTRAPPEDFM 即送50刀。</del><br><del>仅限新用户注册。</del><br>已过期。。。TAT<br>]]></summary>
    
      <category term="vpn" scheme="http://akitaka.github.io/tags/vpn/"/>
    
      <category term="pptp" scheme="http://akitaka.github.io/tags/pptp/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[利用Automator自动下载WWDC 2014资源]]></title>
    <link href="http://akitaka.github.io/2014/06/08/use_automator_download_wwdc/"/>
    <id>http://akitaka.github.io/2014/06/08/use_automator_download_wwdc/</id>
    <published>2014-06-08T01:44:50.000Z</published>
    <updated>2014-06-09T14:40:53.000Z</updated>
    <content type="html"><![CDATA[<p>WWDC 2014发布了一大堆视频资源，如何一个不剩的下载成了一个大问题<br>作为一个懒人，怎么可以手动。还是利用automator来下载吧。</p>
<p>首先打开Automator。<br>在左边搜索框里输入URL:<br><img src="/images/automator/1.png"><br><a id="more"></a><br>拖拽 获得指定的URL，到右边:<br><img src="/images/automator/2.png"><br>修改url地址为: <a href="https://developer.apple.com/videos/wwdc/2014/" target="_blank">https://developer.apple.com/videos/wwdc/2014/</a><br><img src="/images/automator/3.png"><br>接着，拖拽 从网页获得链接 URL，到 获得指定URL 下方:<br><img src="/images/automator/4.png"><br>OK，我们先点击右上角的运行，来测试一下:<br><img src="/images/automator/5.png"><br>发现有450个URL地址。。。好多是不需要的，于是用 过滤URL 来进行过滤:<br><img src="/images/automator/6.png"><br>先下载所有的PDF文件吧，在整个URL里包含<code>.pdf</code> 运行:<br><img src="/images/automator/7.png"><br>查看结果。。。104个PDF下载地址，完全正确。<br>于是最后一步 下载URL:<br><img src="/images/automator/8.png"><br>可以自己选择喜欢的文件夹路径。</p>
<p>如果我们要下载视频，则在过滤URL里输入 <code>&#95;hd&#95;</code> 下载高清视频，当然也可以用 <code>&#95;sd&#95;</code> 下载标清视频:<br><img src="/images/automator/9.png"></p>
<p>以上～good luck～</p>
<p>ps: 下载过程中，Automator可能会处于假死状态。<br>无任何响应，无需捉急，静等下载完成即可。</p>
<p>ps2: 由于视频文件是在太大。。。我抓了过滤完的URL地址:<br><a href="/resource/hd_dl.txt">hd</a><br><a href="/resource/sd_dl.txt">sd</a><br><a href="/resource/pdf_dl.txt">pdf</a><br>同学们还是用迅雷神器吧…T_T</p>
<p>ps3: 百度网盘地址。。。<br><a href="http://pan.baidu.com/s/1kT7LTOj" target="_blank">http://pan.baidu.com/s/1kT7LTOj</a></p>
]]></content>
    <summary type="html"><![CDATA[<p>WWDC 2014发布了一大堆视频资源，如何一个不剩的下载成了一个大问题<br>作为一个懒人，怎么可以手动。还是利用automator来下载吧。</p>
<p>首先打开Automator。<br>在左边搜索框里输入URL:<br><img src="/images/automator/1.png"><br>]]></summary>
    
      <category term="automator" scheme="http://akitaka.github.io/tags/automator/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Google IP]]></title>
    <link href="http://akitaka.github.io/2014/05/27/IP_Of_Google/"/>
    <id>http://akitaka.github.io/2014/05/27/IP_Of_Google/</id>
    <published>2014-05-27T14:04:43.000Z</published>
    <updated>2014-07-02T01:33:41.000Z</updated>
    <content type="html"><![CDATA[<h4 id="几个Google_IP地址直接访问。">几个Google IP地址直接访问。</h4>
<p>前几个访问较快。<br>好吧，以下IP都阵亡了。。。壮哉局域网。</p>
<p><a href="http://203.208.46.145" target="_blank">203.208.46.145</a><br><a href="http://203.208.46.146" target="_blank">203.208.46.146</a><br><a href="http://203.208.46.147" target="_blank">203.208.46.147</a><br><a href="http://203.208.46.148" target="_blank">203.208.46.148</a><br><a id="more"></a></p>
<p><a href="http://173.194.45.20" target="_blank">173.194.45.20</a><br><a href="http://173.194.45.19" target="_blank">173.194.45.19</a><br><a href="http://173.194.45.18" target="_blank">173.194.45.18</a><br><a href="http://173.194.45.17" target="_blank">173.194.45.17</a><br><a href="http://173.194.45.16" target="_blank">173.194.45.16</a></p>
<p><a href="http://74.125.31.106" target="_blank">74.125.31.106</a><br><a href="http://74.125.128.160" target="_blank">74.125.128.160</a><br><a href="http://74.125.235.97" target="_blank">74.125.235.97</a></p>
<p><del><a href="http://64.233.183.147" target="_blank">64.233.183.147</a></del><br><del><a href="http://64.233.183.104" target="_blank">64.233.183.104</a></del><br><del><a href="http://64.233.183.103" target="_blank">64.233.183.103</a></del><br><del><a href="http://64.233.183.99" target="_blank">64.233.183.99</a></del><br><del><a href="http://74.125.71.104" target="_blank">74.125.71.104</a></del><br><del><a href="http://66.102.11.104" target="_blank">66.102.11.104</a></del></p>
]]></content>
    <summary type="html"><![CDATA[<h4 id="几个Google_IP地址直接访问。">几个Google IP地址直接访问。</h4>
<p>前几个访问较快。<br>好吧，以下IP都阵亡了。。。壮哉局域网。</p>
<p><a href="http://203.208.46.145" target="_blank">203.208.46.145</a><br><a href="http://203.208.46.146" target="_blank">203.208.46.146</a><br><a href="http://203.208.46.147" target="_blank">203.208.46.147</a><br><a href="http://203.208.46.148" target="_blank">203.208.46.148</a><br>]]></summary>
    
      <category term="Google" scheme="http://akitaka.github.io/tags/Google/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS开发笔记(iBeacon & BLE)]]></title>
    <link href="http://akitaka.github.io/2014/04/24/iOS_start_with_iBeacon/"/>
    <id>http://akitaka.github.io/2014/04/24/iOS_start_with_iBeacon/</id>
    <published>2014-04-24T14:44:27.000Z</published>
    <updated>2014-04-29T15:16:07.000Z</updated>
    <content type="html"><![CDATA[<h4 id="自从Apple发布了iBeacon以来，越来越多的人开始关注蓝牙和iBeacon应用。">自从Apple发布了iBeacon以来，越来越多的人开始关注蓝牙和iBeacon应用。</h4>
<p>研究了不少日子，今天来个大家做个简单的介绍。</p>
<h3 id="准备:">准备:</h3>
<hr>
<ol>
<li>iOS设备;</li>
<li>iBeacon基站(可以是<a href="http://estimote.com/" target="_blank">Estimote基站</a>或者具备蓝牙4.0的MacBook，本文中用到的设备是MacBook air, Mid 2011);</li>
<li>iOS开发者账号(因为需要用到真机调试);</li>
</ol>
<hr>
<p><a id="more"></a></p>
<h4 id="首先，基站。">首先，基站。</h4>
<p>基站使用了<a href="http://www.blendedcocoa.com/blog/2013/11/02/mavericks-as-an-ibeacon/" target="_blank">Mavericks as an iBeacon</a>这篇教程中的Mavericks as an iBeacon部分。源码可以在Github地址:<a href="https://github.com/mttrb/BeaconOSX" target="_blank">https://github.com/mttrb/BeaconOSX下载</a>。</p>
<h4 id="因为没有专门做过OS_X的开发所以就不详细讲具体东西了，有兴趣的可以自行阅读，还是OC的代码～熟悉的味道！">因为没有专门做过OS X的开发所以就不详细讲具体东西了，有兴趣的可以自行阅读，还是OC的代码～熟悉的味道！</h4>
<p>运行后我们可以看到如下界面：<br><img src="/images/iBeacon/BeaconOSX.png"></p>
<h4 id="在图片上我们可以看到4个输入框最上面的是iBeacon的UUID，下面的分别是major、minor和信号强度。">在图片上我们可以看到4个输入框最上面的是iBeacon的UUID，下面的分别是major、minor和信号强度。</h4>
<h4 id="UUID就是普通的UUID，有很多工具去生成他。major和minor是2个16字节的unsigned_integer，在iBeacon中也是比较重要的2个key值，我们根据需要自定义他，来实现特殊功能、或者同时在一个区域内使用多个iBeacon基站。">UUID就是普通的UUID，有很多工具去生成他。major和minor是2个16字节的unsigned integer，在iBeacon中也是比较重要的2个key值，我们根据需要自定义他，来实现特殊功能、或者同时在一个区域内使用多个iBeacon基站。</h4>
<h4 id="打开OS_X系统蓝牙，然后点击tart_Boardcasting_iBeacon基站就开始工作了。">打开OS X系统蓝牙，然后点击tart Boardcasting iBeacon基站就开始工作了。</h4>
<h4 id="接下来，开始iOS端的代码:">接下来，开始iOS端的代码:</h4>
<p>代码参考了 <a href="http://www.raywenderlich.com/66584/ios7-ibeacons-tutorial" target="_blank">Developing iOS 7 Applications with iBeacons Tutorial</a>。</p>
<h4 id="在AppDelegate中加入:">在AppDelegate中加入:</h4>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
</pre></td><td class="code"><pre><span class="preprocessor">#import <span class="title">"AppDelegate.h"</span></span>

<span class="comment">//导入coreLocation库</span>
@import CoreLocation;

<span class="class"><span class="keyword">@interface</span> <span class="title">AppDelegate</span>()&lt;<span class="title">CLLocationManagerDelegate</span>&gt;</span>

<span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) CLLocationManager *locationManager;
<span class="keyword">@end</span>

<span class="class"><span class="keyword">@implementation</span> <span class="title">AppDelegate</span></span>


<span class="class"><span class="keyword">@implementation</span> <span class="title">AppDelegate</span></span>

- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions
{
    <span class="comment">// Override point for customization after application launch.</span>
    <span class="comment">//初始化location manager</span>
    <span class="keyword">self</span><span class="variable">.locationManager</span> = [[CLLocationManager alloc] init];
    <span class="keyword">self</span><span class="variable">.locationManager</span><span class="variable">.delegate</span> = <span class="keyword">self</span>;
    
    [[<span class="built_in">UIApplication</span> sharedApplication] cancelAllLocalNotifications];
    
    <span class="keyword">return</span> <span class="literal">YES</span>;
}

<span class="comment">//iOS设备进入iBeacon范围</span>
- (<span class="keyword">void</span>)locationManager:(CLLocationManager *)manager didEnterRegion:(CLRegion *)region
{
    <span class="built_in">NSLog</span>(@<span class="string">"enter"</span>);
    <span class="keyword">if</span> ([region isKindOfClass:[CLBeaconRegion class]]) {
    	<span class="comment">//自定义的本地信息推送</span>
        <span class="built_in">UILocalNotification</span> *notification = [[<span class="built_in">UILocalNotification</span> alloc] init];
        notification<span class="variable">.alertBody</span> = @<span class="string">"欢迎光临"</span>;
        notification<span class="variable">.soundName</span> = @<span class="string">"Default"</span>;
        [[<span class="built_in">UIApplication</span> sharedApplication] presentLocalNotificationNow:notification];
    }
}

<span class="comment">//iOS设备离开iBeacon范围</span>
- (<span class="keyword">void</span>)locationManager:(CLLocationManager *)manager didExitRegion:(CLRegion *)region
{
    <span class="keyword">if</span> ([region isKindOfClass:[CLBeaconRegion class]]) {
    	<span class="comment">//自定义的本地信息推送</span>
        <span class="built_in">UILocalNotification</span> *notification = [[<span class="built_in">UILocalNotification</span> alloc] init];
        notification<span class="variable">.alertBody</span> = @<span class="string">"欢迎再次光临"</span>;
        notification<span class="variable">.soundName</span> = @<span class="string">"Default"</span>;
        [[<span class="built_in">UIApplication</span> sharedApplication] presentLocalNotificationNow:notification];
    }
}
</pre></td></tr></table></figure>


<h4 id="在StoryBoard上拖个UILabel上去，然后关联到ViewController-m中。">在StoryBoard上拖个UILabel上去，然后关联到ViewController.m中。</h4>
<h4 id="接下来修改下ViewController-m">接下来修改下ViewController.m</h4>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
</pre></td><td class="code"><pre><span class="preprocessor">#import <span class="title">"ViewController.h"</span></span>

@import CoreLocation;

<span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()&lt;<span class="title">CLLocationManagerDelegate</span>&gt;</span>

<span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>)   CLLocationManager *locationManager;
<span class="keyword">@property</span> (<span class="keyword">nonatomic</span>)               CLBeaconRegion      *beaconRegion;
<span class="comment">//StoryBoard上的label</span>
<span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>)     <span class="keyword">IBOutlet</span> <span class="built_in">UILabel</span>      *location;
<span class="keyword">@end</span>

<span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span>

- (<span class="keyword">void</span>)viewDidLoad
{
    [<span class="keyword">super</span> viewDidLoad];
	<span class="comment">// Do any additional setup after loading the view, typically from a nib.</span>
    <span class="keyword">self</span><span class="variable">.locationManager</span> = [[CLLocationManager alloc] init];
    <span class="keyword">self</span><span class="variable">.locationManager</span><span class="variable">.delegate</span> = <span class="keyword">self</span>;
    
    [<span class="keyword">self</span> startMonitoring];
}

- (<span class="keyword">void</span>)startMonitoring
{
    <span class="comment">//uuid、major、minor跟iBeacon的参数对应。</span>
    _beaconRegion = [[CLBeaconRegion alloc] initWithProximityUUID:[[NSUUID alloc] initWithUUIDString:@<span class="string">"00D4B4DE-159B-704E-E317-1BBE3B7E8927"</span>]
                                                            major:<span class="number">5</span>
                                                            minor:<span class="number">1000</span>
                                                            identifier:@<span class="string">"test"</span>];
    [<span class="keyword">self</span><span class="variable">.locationManager</span> startMonitoringForRegion:_beaconRegion];
    [<span class="keyword">self</span><span class="variable">.locationManager</span> startRangingBeaconsInRegion:_beaconRegion];
}

- (<span class="built_in">NSString</span> *)nameForProximity:(CLProximity)proximity {
    <span class="keyword">switch</span> (proximity) {
        <span class="keyword">case</span> CLProximityUnknown:
            <span class="keyword">return</span> @<span class="string">"Unknown"</span>;
            <span class="keyword">break</span>;
        <span class="keyword">case</span> CLProximityImmediate:
            <span class="keyword">return</span> @<span class="string">"Immediate"</span>;
            <span class="keyword">break</span>;
        <span class="keyword">case</span> CLProximityNear:
            <span class="keyword">return</span> @<span class="string">"Near"</span>;
            <span class="keyword">break</span>;
        <span class="keyword">case</span> CLProximityFar:
            <span class="keyword">return</span> @<span class="string">"Far"</span>;
            <span class="keyword">break</span>;
    }
}

<span class="preprocessor">#pragma mark - CLLocationManagerDelegate</span>
- (<span class="keyword">void</span>)locationManager:(CLLocationManager *)manager monitoringDidFailForRegion:(CLRegion *)region withError:(<span class="built_in">NSError</span> *)error {
    <span class="built_in">NSLog</span>(@<span class="string">"Failed monitoring region: %@"</span>, error);
}

- (<span class="keyword">void</span>)locationManager:(CLLocationManager *)manager didFailWithError:(<span class="built_in">NSError</span> *)error {
    <span class="built_in">NSLog</span>(@<span class="string">"Location manager failed: %@"</span>, error);
}

- (<span class="keyword">void</span>)locationManager:(CLLocationManager *)manager didRangeBeacons:(<span class="built_in">NSArray</span> *)beacons inRegion:(CLBeaconRegion *)region
{
    <span class="keyword">for</span> (CLBeacon *beacon in beacons) {
        _location<span class="variable">.text</span> = [<span class="built_in">NSString</span> stringWithFormat:@<span class="string">"%@"</span>, [<span class="keyword">self</span> nameForProximity:beacon<span class="variable">.proximity</span>]];
    }
}
</pre></td></tr></table></figure>


<h4 id="OK，至此搞定了基站和客户端，迫不及待的来测试一下吧。">OK，至此搞定了基站和客户端，迫不及待的来测试一下吧。</h4>
<p>开启基站，打开iOS设备上的蓝牙。打开app！<br>看到label上的字了嘛，移动设备，看看他变了嘛。<br>如果一切正常，退出app。关掉基站。<br>等待大约38秒之后，系统通知中心发来离开基站的推送。<br>个人猜测是因为iBeacon信号强度很容易受到各种因素干扰，所以apple做了一个延时机制。<br>如果在这38秒期间反复开启、关闭基站，系统将以最后一次关闭基站时间为准来计算38秒计时。<br>在系统确认退出后，开启基站，系统才会再次推送进入基站信息。</p>
<p>以上iOS端代码已发布于<a href="https://github.com/akitaka/iBeaconDemo" target="_blank">Github地址</a>。Enjoy yourself～</p>
]]></content>
    <summary type="html"><![CDATA[<h4 id="自从Apple发布了iBeacon以来，越来越多的人开始关注蓝牙和iBeacon应用。">自从Apple发布了iBeacon以来，越来越多的人开始关注蓝牙和iBeacon应用。</h4>
<p>研究了不少日子，今天来个大家做个简单的介绍。</p>
<h3 id="准备:">准备:</h3>
<hr>
<ol>
<li>iOS设备;</li>
<li>iBeacon基站(可以是<a href="http://estimote.com/" target="_blank">Estimote基站</a>或者具备蓝牙4.0的MacBook，本文中用到的设备是MacBook air, Mid 2011);</li>
<li>iOS开发者账号(因为需要用到真机调试);</li>
</ol>
<hr>
<p>]]></summary>
    
      <category term="iOS" scheme="http://akitaka.github.io/tags/iOS/"/>
    
      <category term="开发" scheme="http://akitaka.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="iBeacon" scheme="http://akitaka.github.io/tags/iBeacon/"/>
    
      <category term="BLE" scheme="http://akitaka.github.io/tags/BLE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS开发笔记（使用自定义字体）]]></title>
    <link href="http://akitaka.github.io/2014/04/17/iOS_use_custom_font/"/>
    <id>http://akitaka.github.io/2014/04/17/iOS_use_custom_font/</id>
    <published>2014-04-17T03:22:01.000Z</published>
    <updated>2014-04-17T11:21:53.000Z</updated>
    <content type="html"><![CDATA[<h3 id="方法一:">方法一:</h3>
<ol>
<li><p>确定项目工程的中有添加要用到的字体文件(.ttf,.odf)</p>
</li>
<li><p>然后在工程的Info.plist文件中新建一行(Add Row), 添加key为: UIAppFonts,类型为Array或者Dictionary;<br>在UIAppFonts下再建立一个键值对, key为: Item 0, 添加Value为<code>字体文件名.ttf</code>（string型);<br>可以添加多个, 使用的时候写对应字体名字就行</p>
</li>
<li><p>在项目里要用字体的时候<code>text.font = [UIFont fontWithName:@”字体文件名” size:20.0]</code>就可以了</p>
</li>
</ol>
<h3 id="方法二:">方法二:</h3>
<h4 id="当然Apple提供了更多系统自带的字体，需要让系统自行去下载">当然Apple提供了更多系统自带的字体，需要让系统自行去下载</h4>
<p>这里有Apple <a href="https://developer.apple.com/library/ios/samplecode/DownloadFont/Introduction/Intro.html" target="_blank">官方Demo工程</a><br>这里是所有的 <a href="http://support.apple.com/kb/HT5484?viewlocale=zh_CN&amp;locale=zh_CN" target="_blank">字体列表</a></p>
<h4 id="此方法仅支持iOS6以上系统">此方法仅支持iOS6以上系统</h4>
<a id="more"></a>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
</pre></td><td class="code"><pre><span class="comment">//初始化字体</span>
<span class="built_in">UIFont</span>* aFont = [<span class="built_in">UIFont</span> fontWithName:fontName size:<span class="number">12.</span>];
<span class="comment">// 判断字体是否已经下载</span>
<span class="keyword">if</span> (aFont &amp;&amp; ([aFont<span class="variable">.fontName</span> compare:fontName] == NSOrderedSame || [aFont<span class="variable">.familyName</span> compare:fontName] == NSOrderedSame)) {
    <span class="comment">// Go ahead and display the sample text.</span>
    NSUInteger sampleIndex = [_fontNames indexOfObject:fontName];
    _fTextView<span class="variable">.text</span> = [_fontSamples objectAtIndex:sampleIndex];
    _fTextView<span class="variable">.font</span> = [<span class="built_in">UIFont</span> fontWithName:fontName size:<span class="number">24.</span>];
    <span class="keyword">return</span>;
}

<span class="comment">//使用字体PostScript名字来创建一个dictionary.</span>
<span class="built_in">NSMutableDictionary</span> *attrs = [<span class="built_in">NSMutableDictionary</span> dictionaryWithObjectsAndKeys:fontName, kCTFontNameAttribute, <span class="literal">nil</span>];

<span class="comment">//使用上面的的dictionary新建一个字体的描述.</span>
CTFontDescriptorRef desc = CTFontDescriptorCreateWithAttributes((__bridge CFDictionaryRef)attrs);

<span class="comment">//将desc信息保存在NSMutableArray中</span>
<span class="built_in">NSMutableArray</span> *descs = [<span class="built_in">NSMutableArray</span> arrayWithCapacity:<span class="number">0</span>];
[descs addObject:(__bridge <span class="keyword">id</span>)desc];
CFRelease(desc);


__block <span class="built_in">BOOL</span> errorDuringDownload = <span class="literal">NO</span>;

<span class="comment">// 开始下载字体..</span>
CTFontDescriptorMatchFontDescriptorsWithProgressHandler( (__bridge CFArrayRef)descs, <span class="literal">NULL</span>,  ^(CTFontDescriptorMatchingState state, CFDictionaryRef progressParameter) {
        
    <span class="keyword">double</span> progressValue = [[(__bridge <span class="built_in">NSDictionary</span> *)progressParameter objectForKey:(<span class="keyword">id</span>)kCTFontDescriptorMatchingPercentage] doubleValue];

    <span class="keyword">if</span> (state == kCTFontDescriptorMatchingDidBegin) {
        <span class="built_in">dispatch_async</span>( dispatch_get_main_queue(), ^ {
            <span class="comment">// Show an activity indicator</span>
            [_fActivityIndicatorView startAnimating];
            _fActivityIndicatorView<span class="variable">.hidden</span> = <span class="literal">NO</span>;
            
            <span class="comment">// Show something in the text view to indicate that we are downloading</span>
            _fTextView<span class="variable">.text</span>= [<span class="built_in">NSString</span> stringWithFormat:@<span class="string">"Downloading %@"</span>, fontName];
            _fTextView<span class="variable">.font</span> = [<span class="built_in">UIFont</span> systemFontOfSize:<span class="number">14.</span>];
            
            <span class="built_in">NSLog</span>(@<span class="string">"Begin Matching"</span>);
        });
    } <span class="keyword">else</span> <span class="keyword">if</span> (state == kCTFontDescriptorMatchingDidFinish) {
        <span class="built_in">dispatch_async</span>( dispatch_get_main_queue(), ^ {
            <span class="comment">// Remove the activity indicator</span>
            [_fActivityIndicatorView stopAnimating];
            _fActivityIndicatorView<span class="variable">.hidden</span> = <span class="literal">YES</span>;
            
            <span class="comment">// Display the sample text for the newly downloaded font</span>
            NSUInteger sampleIndex = [_fontNames indexOfObject:fontName];
            _fTextView<span class="variable">.text</span> = [_fontSamples objectAtIndex:sampleIndex];
            _fTextView<span class="variable">.font</span> = [<span class="built_in">UIFont</span> fontWithName:fontName size:<span class="number">24.</span>];
            
            <span class="comment">// Log the font URL in the console</span>
            CTFontRef fontRef = CTFontCreateWithName((__bridge CFStringRef)fontName, <span class="number">0.</span>, <span class="literal">NULL</span>);
            CFStringRef fontURL = CTFontCopyAttribute(fontRef, kCTFontURLAttribute);
            <span class="built_in">NSLog</span>(@<span class="string">"%@"</span>, (__bridge <span class="built_in">NSURL</span>*)(fontURL));
            CFRelease(fontURL);
            CFRelease(fontRef);
            
            <span class="keyword">if</span> (!errorDuringDownload) {
                <span class="built_in">NSLog</span>(@<span class="string">"%@ downloaded"</span>, fontName);
            }
        });
    } <span class="keyword">else</span> <span class="keyword">if</span> (state == kCTFontDescriptorMatchingWillBeginDownloading) {
        <span class="built_in">dispatch_async</span>( dispatch_get_main_queue(), ^ {
            <span class="comment">// Show a progress bar</span>
            _fProgressView<span class="variable">.progress</span> = <span class="number">0.0</span>;
            _fProgressView<span class="variable">.hidden</span> = <span class="literal">NO</span>;
            <span class="built_in">NSLog</span>(@<span class="string">"Begin Downloading"</span>);
        });
    } <span class="keyword">else</span> <span class="keyword">if</span> (state == kCTFontDescriptorMatchingDidFinishDownloading) {
        <span class="built_in">dispatch_async</span>( dispatch_get_main_queue(), ^ {
            <span class="comment">// Remove the progress bar</span>
            _fProgressView<span class="variable">.hidden</span> = <span class="literal">YES</span>;
            <span class="built_in">NSLog</span>(@<span class="string">"Finish downloading"</span>);
        });
    } <span class="keyword">else</span> <span class="keyword">if</span> (state == kCTFontDescriptorMatchingDownloading) {
        <span class="built_in">dispatch_async</span>( dispatch_get_main_queue(), ^ {
            <span class="comment">// Use the progress bar to indicate the progress of the downloading</span>
            [_fProgressView setProgress:progressValue / <span class="number">100.0</span> animated:<span class="literal">YES</span>];
            <span class="built_in">NSLog</span>(@<span class="string">"Downloading %.0f%% complete"</span>, progressValue);
        });
    } <span class="keyword">else</span> <span class="keyword">if</span> (state == kCTFontDescriptorMatchingDidFailWithError) {
        <span class="comment">// An error has occurred.</span>
        <span class="comment">// Get the error message</span>
        <span class="built_in">NSError</span> *error = [(__bridge <span class="built_in">NSDictionary</span> *)progressParameter objectForKey:(<span class="keyword">id</span>)kCTFontDescriptorMatchingError];
        <span class="keyword">if</span> (error != <span class="literal">nil</span>) {
            _errorMessage = [error description];
        } <span class="keyword">else</span> {
            _errorMessage = @<span class="string">"ERROR MESSAGE IS NOT AVAILABLE!"</span>;
        }
        <span class="comment">// Set our flag</span>
        errorDuringDownload = <span class="literal">YES</span>;
        
        <span class="built_in">dispatch_async</span>( dispatch_get_main_queue(), ^ {
            _fProgressView<span class="variable">.hidden</span> = <span class="literal">YES</span>;
            <span class="built_in">NSLog</span>(@<span class="string">"Download error: %@"</span>, _errorMessage);
        });
    }
    
    <span class="keyword">return</span> (<span class="keyword">bool</span>)<span class="literal">YES</span>;
});

</pre></td></tr></table></figure>

<h4 id="字体下载可能需要等待一段时间，字体下载完成后会返回notification告知当前的controller。">字体下载可能需要等待一段时间，字体下载完成后会返回notification告知当前的controller。</h4>
<h4 id="以上就是两种自定义字体方法～Good_Luck～">以上就是两种自定义字体方法～Good Luck～</h4>
]]></content>
    <summary type="html"><![CDATA[<h3 id="方法一:">方法一:</h3>
<ol>
<li><p>确定项目工程的中有添加要用到的字体文件(.ttf,.odf)</p>
</li>
<li><p>然后在工程的Info.plist文件中新建一行(Add Row), 添加key为: UIAppFonts,类型为Array或者Dictionary;<br>在UIAppFonts下再建立一个键值对, key为: Item 0, 添加Value为<code>字体文件名.ttf</code>（string型);<br>可以添加多个, 使用的时候写对应字体名字就行</p>
</li>
<li><p>在项目里要用字体的时候<code>text.font = [UIFont fontWithName:@”字体文件名” size:20.0]</code>就可以了</p>
</li>
</ol>
<h3 id="方法二:">方法二:</h3>
<h4 id="当然Apple提供了更多系统自带的字体，需要让系统自行去下载">当然Apple提供了更多系统自带的字体，需要让系统自行去下载</h4>
<p>这里有Apple <a href="https://developer.apple.com/library/ios/samplecode/DownloadFont/Introduction/Intro.html" target="_blank">官方Demo工程</a><br>这里是所有的 <a href="http://support.apple.com/kb/HT5484?viewlocale=zh_CN&amp;locale=zh_CN" target="_blank">字体列表</a></p>
<h4 id="此方法仅支持iOS6以上系统">此方法仅支持iOS6以上系统</h4>
]]></summary>
    
      <category term="iOS" scheme="http://akitaka.github.io/tags/iOS/"/>
    
      <category term="开发" scheme="http://akitaka.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[树莓派(二)]]></title>
    <link href="http://akitaka.github.io/2014/03/29/Raspberry_Pi_Change_SSH_Port/"/>
    <id>http://akitaka.github.io/2014/03/29/Raspberry_Pi_Change_SSH_Port/</id>
    <published>2014-03-29T12:27:36.000Z</published>
    <updated>2014-03-29T12:42:48.000Z</updated>
    <content type="html"><![CDATA[<h4 id="外网SSH连接时候发现，默认的22端口没法连上！难道是运营商限制么。修改个端口看看。">外网SSH连接时候发现，默认的22端口没法连上！难道是运营商限制么。修改个端口看看。</h4>
<ol>
<li>编辑SSH配置文件:</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="variable">$sudo</span> nano /etc/ssh/sshd_config
</pre></td></tr></table></figure>

<ol>
<li>修改或者添加端口号。</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre># What ports, IPs <span class="keyword">and</span> protocols we listen <span class="keyword">for</span>
<span class="keyword">Port</span> <span class="number">22</span>
<span class="keyword">Port</span> <span class="number">8888</span>  #(添加的端口号, 也可以修改<span class="number">22</span>端口)

# <span class="keyword">Use</span> these options <span class="keyword">to</span> <span class="keyword">restrict</span> which interfaces/protocols sshd will bind <span class="keyword">to</span>
</pre></td></tr></table></figure>

<ol>
<li>ctrl+o保存，ctrl+x退出<a id="more"></a></li>
<li>重启SSH服务:</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="built_in">sudo</span> /etc/init.d/ssh restart
</pre></td></tr></table></figure>

<h4 id="完成，现在可以用刚才修改的端口号登录了">完成，现在可以用刚才修改的端口号登录了</h4>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="tag">ssh</span> 用户名<span class="at_rule">@<span class="keyword">域名</span> -p 端口号</span>
</pre></td></tr></table></figure>

<h4 id="外网测试了下，果然可以访问了。Good_luck~~">外网测试了下，果然可以访问了。Good luck~~</h4>
]]></content>
    <summary type="html"><![CDATA[<h4 id="外网SSH连接时候发现，默认的22端口没法连上！难道是运营商限制么。修改个端口看看。">外网SSH连接时候发现，默认的22端口没法连上！难道是运营商限制么。修改个端口看看。</h4>
<ol>
<li>编辑SSH配置文件:</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="variable">$sudo</span> nano /etc/ssh/sshd_config
</pre></td></tr></table></figure>

<ol>
<li>修改或者添加端口号。</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre># What ports, IPs <span class="keyword">and</span> protocols we listen <span class="keyword">for</span>
<span class="keyword">Port</span> <span class="number">22</span>
<span class="keyword">Port</span> <span class="number">8888</span>  #(添加的端口号, 也可以修改<span class="number">22</span>端口)

# <span class="keyword">Use</span> these options <span class="keyword">to</span> <span class="keyword">restrict</span> which interfaces/protocols sshd will bind <span class="keyword">to</span>
</pre></td></tr></table></figure>

<ol>
<li>ctrl+o保存，ctrl+x退出]]></summary>
    
      <category term="Raspberry Pi" scheme="http://akitaka.github.io/tags/Raspberry%20Pi/"/>
    
      <category term="SSH" scheme="http://akitaka.github.io/tags/SSH/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[树莓派(一)]]></title>
    <link href="http://akitaka.github.io/2014/03/25/Raspberry_Pi_Change_Default_User/"/>
    <id>http://akitaka.github.io/2014/03/25/Raspberry_Pi_Change_Default_User/</id>
    <published>2014-03-25T14:13:35.000Z</published>
    <updated>2014-03-29T03:17:26.000Z</updated>
    <content type="html"><![CDATA[<h4 id="装好了树莓派，总得折腾点啥吧。默认的密码总感觉不是很安全。">装好了树莓派，总得折腾点啥吧。默认的密码总感觉不是很安全。</h4>
<h4 id="下面就来改改默认的用户名和密码。">下面就来改改默认的用户名和密码。</h4>
<h4 id="先介绍下最简单的改密码方法:">先介绍下最简单的改密码方法:</h4>
<ol>
<li>登录后输入<code>sudo raspi-config</code></li>
<li>选择2 Change User Password。</li>
<li>输入你的密码<h4 id="完成～这样就已经修改了默认的密码。当然这样我们的用户名依然是默认的pi，也只有在默认pi的用户名下可以如此修改密码。">完成～这样就已经修改了默认的密码。当然这样我们的用户名依然是默认的pi，也只有在默认pi的用户名下可以如此修改密码。</h4>
<h4 id="好吧，有强迫症的我需要修改用户名。">好吧，有强迫症的我需要修改用户名。</h4>
<a id="more"></a></li>
<li>给root账户加个密码:</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>$ <span class="built_in">sudo</span> passwd root
</pre></td></tr></table></figure>

<ol>
<li>然后用root账户登录。(注意：如果是默认的pi用户登录，就不能给自己修改用户名了)</li>
<li>开始修改用户名:</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="preprocessor"># usermod -l 我的用户名 pi</span>
<span class="preprocessor"># usermod -m -d /home/我的用户名 我的用户名</span>
<span class="preprocessor"># groupmod -n 我的用户名 pi</span>
</pre></td></tr></table></figure>

<ol>
<li>完成～<h4 id="这时就能用刚才修改的用户名登录啦。">这时就能用刚才修改的用户名登录啦。</h4>
<h4 id="登录之后，可以用passwd来修改密码。">登录之后，可以用<code>passwd</code>来修改密码。</h4>
<h4 id="禁用root账户:">禁用root账户:</h4>
</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>$ <span class="built_in">sudo</span> passwd <span class="operator">-l</span> root
</pre></td></tr></table></figure>

<h4 id="Have_fun~">Have fun~</h4>
]]></content>
    <summary type="html"><![CDATA[<h4 id="装好了树莓派，总得折腾点啥吧。默认的密码总感觉不是很安全。">装好了树莓派，总得折腾点啥吧。默认的密码总感觉不是很安全。</h4>
<h4 id="下面就来改改默认的用户名和密码。">下面就来改改默认的用户名和密码。</h4>
<h4 id="先介绍下最简单的改密码方法:">先介绍下最简单的改密码方法:</h4>
<ol>
<li>登录后输入<code>sudo raspi-config</code></li>
<li>选择2 Change User Password。</li>
<li>输入你的密码<h4 id="完成～这样就已经修改了默认的密码。当然这样我们的用户名依然是默认的pi，也只有在默认pi的用户名下可以如此修改密码。">完成～这样就已经修改了默认的密码。当然这样我们的用户名依然是默认的pi，也只有在默认pi的用户名下可以如此修改密码。</h4>
<h4 id="好吧，有强迫症的我需要修改用户名。">好吧，有强迫症的我需要修改用户名。</h4>
]]></summary>
    
      <category term="Raspberry Pi" scheme="http://akitaka.github.io/tags/Raspberry%20Pi/"/>
    
      <category term="Default user" scheme="http://akitaka.github.io/tags/Default%20user/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Start with Raspberry Pi]]></title>
    <link href="http://akitaka.github.io/2014/03/19/start_raspberry_pi/"/>
    <id>http://akitaka.github.io/2014/03/19/start_raspberry_pi/</id>
    <published>2014-03-19T07:59:08.000Z</published>
    <updated>2014-07-02T10:30:03.000Z</updated>
    <content type="html"><![CDATA[<h4 id="Prepare:">Prepare:</h4>
<hr>
<ol>
<li>A Raspberry Pi board;</li>
<li>A 4G or higher SD card;</li>
<li>The Rasbbain OS image (<a href="http://www.raspberrypi.org/downloads" target="_blank">download here</a>);</li>
<li>A 5V micro USB power adapter which capable to draw minimum 0.7A currents;</li>
<li>Mac OS X(10.7 or above, because the following steps are all on Mac OS X);</li>
</ol>
<hr>
<a id="more"></a>

<h4 id="The_following_steps_to_set_up_an_SD_card_with_Raspbian_Wheezy_system_image:">The following steps to set up an SD card with Raspbian Wheezy system image:</h4>
<hr>
<ol>
<li>Insert your new SD card into Mac internal sd card reader.</li>
<li>Open Terminal and execute <code>df -h</code><h4 id="view_the_currently_mounted_disks_and_it’s_free_space-_This_command_should_show_something_as_below:">view the currently mounted disks and it’s free space. This command should show something as below:</h4>
</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="function_or_atom">er</span>:~ <span class="function_or_atom">tom</span>$ <span class="function_or_atom">df</span> -<span class="function_or_atom">h</span>
<span class="function_or_atom">system</span>      <span class="variable">Size</span>   <span class="variable">Used</span>  <span class="variable">Avail</span> <span class="variable">Capacity</span>  <span class="function_or_atom">iused</span>    <span class="function_or_atom">ifree</span> <span class="comment">%iused  Mounted on</span>
/<span class="function_or_atom">disk0s2</span>   <span class="number">233</span><span class="variable">Gi</span>  <span class="number">187</span><span class="variable">Gi</span>   <span class="number">45</span><span class="variable">Gi</span>    <span class="number">81</span><span class="comment">% 49169583 11899857   81%   /</span>
<span class="function_or_atom">s</span>          <span class="number">187</span><span class="variable">Ki</span>  <span class="number">187</span><span class="variable">Ki</span>    <span class="number">0</span><span class="variable">Bi</span>   <span class="number">100</span><span class="comment">%      648        0  100%   /dev</span>
-<span class="function_or_atom">hosts</span>       <span class="number">0</span><span class="variable">Bi</span>    <span class="number">0</span><span class="variable">Bi</span>    <span class="number">0</span><span class="variable">Bi</span>   <span class="number">100</span><span class="comment">%        0        0  100%   /net</span>
<span class="function_or_atom">auto_home</span>    <span class="number">0</span><span class="variable">Bi</span>    <span class="number">0</span><span class="variable">Bi</span>    <span class="number">0</span><span class="variable">Bi</span>   <span class="number">100</span><span class="comment">%        0        0  100%   /home</span>
/<span class="function_or_atom">disk3s1</span>    <span class="number">15</span><span class="variable">Gi</span>  <span class="number">2.3</span><span class="variable">Mi</span>   <span class="number">15</span><span class="variable">Gi</span>     <span class="number">1</span><span class="comment">%        0        0  100%   /Volumes/NO NAME</span>
</pre></td></tr></table></figure>

<pre><code>####Find the disk size close your SD card size, my SD card is 16G, so find <span class="tag">&lt;<span class="title">code</span>&gt;</span>/dev/disk3s1<span class="tag">&lt;/<span class="title">code</span>&gt;</span> is my SD card.
</code></pre><ol>
<li>Umount the disk, but not eject, execute <code>diskutil umount /dev/disk3s1</code>, keep the SD card in place.<h4 id="The_command_should_show_like_below:">The command should show like below:</h4>
</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>er:~ tom$ diskutil umount /dev/disk3s1
<span class="keyword">me</span> NO NAME <span class="function_start"><span class="keyword">on</span></span> disk3s1 unmounted
</pre></td></tr></table></figure>

<ol>
<li>Extract the downloaded zip file, you can get the .img file.</li>
<li>Be careful! the next step is <font color="red">very dangerous</font>, make sure that you are not mistaken in setting the target SD card device path! </li>
<li>Execute the dd in command:<h4 id="if=_is_the_path_of_your_-img_file,_and_of=_is_your_SD_card_path">if= is the path of your .img file, and of= is your SD card path</h4>
<h4 id="notice:_the_path_above_is_/dev/disk3s1,_but_we_just_need_/dev/disk3_only-">notice: the path above is /dev/disk3s1, but we just need /dev/disk3 only.</h4>
</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>er:~ tom$ sudo dd <span class="keyword">if</span>=/Users/tom/Desktop/<span class="number">2014</span>-<span class="number">01</span>-<span class="number">07</span>-wheezy-raspbian.img <span class="operator">of</span>=/dev/disk3 bs=<span class="number">1</span>m
<span class="built_in">word</span>:
+<span class="number">0</span> records <span class="operator">in</span>
+<span class="number">0</span> records out
<span class="number">227200</span> <span class="keyword">bytes</span> transferred <span class="operator">in</span> <span class="number">1611.596172</span> <span class="built_in">secs</span> (<span class="number">1838070</span> <span class="keyword">bytes</span>/<span class="built_in">sec</span>)
</pre></td></tr></table></figure>

<pre><code>####Be patience, This takes a <span class="typename">bit</span> long <span class="typename">time</span> <span class="keyword">for</span> waiting it finish. <span class="keyword">In</span> my <span class="keyword">case</span> it takes almost half an hour, usd <span class="number">16</span>G Sandisk class <span class="number">10</span> SDHC SD card <span class="keyword">to</span> flash the image <span class="keyword">file</span> <span class="keyword">to</span> SD Card. It may quicker <span class="keyword">or</span> longer <span class="keyword">for</span> your SD card.
</code></pre><ol>
<li>After finished flashing image to SD card, you may see a disk named boot on the disktop. Then eject the SD card on your mac, insert it to your Raspberry Pi.</li>
</ol>
<h4 id="Plug_the_Raspberry_Pi_power_adapter,_USB_keyboard,_connect_the_HDMI_display_port_to_a_HDMI_capable_display_monitor_or_TV,_Congratulations~_You_are_successfully_finished~!">Plug the Raspberry Pi power adapter, USB keyboard, connect the HDMI display port to a HDMI capable display monitor or TV, Congratulations~ You are successfully finished~!</h4>
]]></content>
    <summary type="html"><![CDATA[<h4 id="Prepare:">Prepare:</h4>
<hr>
<ol>
<li>A Raspberry Pi board;</li>
<li>A 4G or higher SD card;</li>
<li>The Rasbbain OS image (<a href="http://www.raspberrypi.org/downloads" target="_blank">download here</a>);</li>
<li>A 5V micro USB power adapter which capable to draw minimum 0.7A currents;</li>
<li>Mac OS X(10.7 or above, because the following steps are all on Mac OS X);</li>
</ol>
<hr>
]]></summary>
    
      <category term="Raspberry Pi" scheme="http://akitaka.github.io/tags/Raspberry%20Pi/"/>
    
      <category term="install" scheme="http://akitaka.github.io/tags/install/"/>
    
      <category term="Raspbain" scheme="http://akitaka.github.io/tags/Raspbain/"/>
    
      <category term="Mac OS X" scheme="http://akitaka.github.io/tags/Mac%20OS%20X/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Sublime markdown插件制作hexo模版]]></title>
    <link href="http://akitaka.github.io/2014/03/05/sublime_plugin_for_mdown/"/>
    <id>http://akitaka.github.io/2014/03/05/sublime_plugin_for_mdown/</id>
    <published>2014-03-05T14:49:47.000Z</published>
    <updated>2014-03-28T14:41:35.000Z</updated>
    <content type="html"><![CDATA[<p>今天中午，终于把css大致调整好了～</p><br><p>感觉每次写之前新建文件好麻烦，于是就找到了<a href="https://github.com/kairyou/SublimeTmpl‎" target="_blank">SublimeTmpl</a></p><br><p>几经折腾和求教，终于搞定了hexo的md模板</p><br><p>首先安装<a href="http://www.sublimetext.com" target="_blank">Sublime Text</a>，插件支持Subliem Text 2和3</p><br><p>我这里使用的是Sublime Text3安装package control。</p><br><p>打开sublime text 3，按<code>ctrl+`</code>或者菜单<code>View &gt; Show Console</code>打开命令窗口，粘贴以下代码并回车即可。</p>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>import urllib.request,os;pf=<span class="string">'Package Control.sublime-package'</span>;ipp=sublime.installed_packages_path();urllib.request.install_opener(urllib.request.build_opener(urllib.request.ProxyHandler()));<span class="built_in">open</span>(os.path.join(ipp,pf),<span class="string">'wb'</span>).<span class="built_in">write</span>(urllib.request.urlopen(<span class="string">'http://sublime.wbond.net/'</span>+pf.<span class="built_in">replace</span>(<span class="string">' '</span>,<span class="string">'%20'</span>)).<span class="built_in">read</span>())
</pre></td></tr></table></figure>

<p><a id="more"></a></p>
<p>稍等之后，package control就安装完毕。然后按<code>shift + command + p</code>输入install，选择Package Control:Install Package，稍等之后输入sublimeTmpl或者tmpl，选中即可安装。</p><br><p>安装完成后，我们可以在<code>Preference &gt; Package Settings</code>中找到SublimeTmpl的配置选项，同时在<code>File &gt; New File(SublimeTmpl)</code>中可以看到默认的模版。</p><br><p>接下来开始制作hexo模版，首先选择<code>Preference &gt; Browse Packages</code>，然后选择文件夹<code>SublimeTmpl &gt; templates</code>，新建一个.tmpl文件，我这里命名为hexo.tmpl。打开文件输入:</p>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>title: 
date: ${date}
<span class="header">tags: 
---</span>
</pre></td></tr></table></figure>

<p>保存之后，打开<code>Preference &gt; Package Settings &gt; Sublime Tmpl &gt; Settings - Menu</code>，在children中添加配置：</p>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="code"><pre>[
    {
        "<span class="attribute">id</span>": <span class="value"><span class="string">"file"</span></span>,
        "<span class="attribute">children</span>":
        <span class="value">[
            {
                "<span class="attribute">caption</span>": <span class="value"><span class="string">"New File (SublimeTmpl)"</span></span>,
                "<span class="attribute">children</span>":
                <span class="value">[
                    {
                        "<span class="attribute">caption</span>": <span class="value"><span class="string">"HTML"</span></span>,
                        "<span class="attribute">command</span>": <span class="value"><span class="string">"sublime_tmpl"</span></span>,
                        "<span class="attribute">args</span>": <span class="value">{
                            "<span class="attribute">type</span>": <span class="value"><span class="string">"html"</span>
                        </span>}
                    </span>},
                    /*下面这段是为hexo模版添加的*/
                    {
                        "<span class="attribute">caption</span>": <span class="value"><span class="string">"HEXO"</span></span>,
                        "<span class="attribute">command</span>": <span class="value"><span class="string">"sublime_tmpl"</span></span>,
                        "<span class="attribute">args</span>": <span class="value">{
                            "<span class="attribute">type</span>": <span class="value"><span class="string">"hexo"</span>
                        </span>}
                    </span>},
                    /*以下的代码省略～*/</span></span>
</pre></td></tr></table></figure>

<p>这是修改后的menu。然后我们打开<code>Preference &gt; Package Settings &gt; Sublime Tmpl &gt; Settings - Commadns</code>。</p>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre>[
    {
        "<span class="attribute">caption</span>": <span class="value"><span class="string">"Tmpl: Create html"</span></span>, "<span class="attribute">command</span>": <span class="value"><span class="string">"sublime_tmpl"</span></span>,
        "<span class="attribute">args</span>": <span class="value">{"<span class="attribute">type</span>": <span class="value"><span class="string">"html"</span></span>}
    </span>},
    /*下面是我们的添加的代码*/
    {
        "<span class="attribute">caption</span>": <span class="value"><span class="string">"Tmpl: Create hexo"</span></span>, "<span class="attribute">command</span>": <span class="value"><span class="string">"sublime_tmpl"</span></span>,
        "<span class="attribute">args</span>": <span class="value">{"<span class="attribute">type</span>": <span class="value"><span class="string">"hexo"</span></span>}
    </span>},
    /*依然省略了以下。。。*/
</pre></td></tr></table></figure>

<p>最后，打开<code>Preference &gt; Package Settings &gt; Sublime Tmpl &gt; Settings - User</code>，添加内容：</p>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>{
	"<span class="attribute">hexo</span>": <span class="value">{
        "<span class="attribute">syntax</span>": <span class="value"><span class="string">"Packages/hexo/hexo.tmLanguage"</span>
        </span>,"<span class="attribute">extension</span>": <span class="value"><span class="string">"md"</span>
    </span>}
</span>}
</pre></td></tr></table></figure>

<p>保存完毕，以上新的模板建好了，赶紧从<code>File &gt; New File(SublimeTmpl)</code>里新建个文件试试看吧。Have fun～</p>

]]></content>
    <summary type="html"><![CDATA[<p>今天中午，终于把css大致调整好了～</p><br><p>感觉每次写之前新建文件好麻烦，于是就找到了<a href="https://github.com/kairyou/SublimeTmpl‎" target="_blank">SublimeTmpl</a></p><br><p>几经折腾和求教，终于搞定了hexo的md模板</p><br><p>首先安装<a href="http://www.sublimetext.com" target="_blank">Sublime Text</a>，插件支持Subliem Text 2和3</p><br><p>我这里使用的是Sublime Text3安装package control。</p><br><p>打开sublime text 3，按<code>ctrl+`</code>或者菜单<code>View &gt; Show Console</code>打开命令窗口，粘贴以下代码并回车即可。</p>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>import urllib.request,os;pf=<span class="string">'Package Control.sublime-package'</span>;ipp=sublime.installed_packages_path();urllib.request.install_opener(urllib.request.build_opener(urllib.request.ProxyHandler()));<span class="built_in">open</span>(os.path.join(ipp,pf),<span class="string">'wb'</span>).<span class="built_in">write</span>(urllib.request.urlopen(<span class="string">'http://sublime.wbond.net/'</span>+pf.<span class="built_in">replace</span>(<span class="string">' '</span>,<span class="string">'%20'</span>)).<span class="built_in">read</span>())
</pre></td></tr></table></figure>

<p>]]></summary>
    
      <category term="Sublime Text" scheme="http://akitaka.github.io/tags/Sublime%20Text/"/>
    
      <category term="Hexo" scheme="http://akitaka.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Blog]]></title>
    <link href="http://akitaka.github.io/2014/03/03/blog/"/>
    <id>http://akitaka.github.io/2014/03/03/blog/</id>
    <published>2014-03-03T14:07:16.000Z</published>
    <updated>2014-03-28T14:41:41.000Z</updated>
    <content type="html"><![CDATA[<p>折腾了几天终于把博客搭好了，从Wordpress到Github pages，最后还是在朋友的推荐下选择了hexo。</p><br><p>感觉使用上比较方便，不过很多功能还没研究。</p><br><p>主题修改了<a href="https://github.com/thiagopnts/hexo-persona-dark" target="_blank">Persona Dark</a>，折腾了一晚上，等有空了再改改。先这样吧～</p><br><a id="more"></a><br><p>2014～加油！</p>
]]></content>
    <summary type="html"><![CDATA[<p>折腾了几天终于把博客搭好了，从Wordpress到Github pages，最后还是在朋友的推荐下选择了hexo。</p><br><p>感觉使用上比较方便，不过很多功能还没研究。</p><br><p>主题修改了<a href="https://github.com/thiagopnts/hexo-persona-dark" target="_blank">Persona Dark</a>，折腾了一晚上，等有空了再改改。先这样吧～</p><br>]]></summary>
    
      <category term="Blog" scheme="http://akitaka.github.io/tags/Blog/"/>
    
  </entry>
  
</feed>
